on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get commit message
        id: get_commit_message
        run: echo "::set-output name=message::$(git log -1 --pretty=%B)"

      - name: Check commit message
        id: check_commit_message
        run: |
          if [[ "${{ steps.get_commit_message.outputs.message }}" != *"Release"* ]]; then
            echo "Commit message does not contain 'Release'. Skipping the job."
            exit 1
          fi

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release

      - name: Package artifacts
        run: |
          dotnet publish -c Release --no-build --output ./publish
          mkdir ./publish/DAC
          mkdir ./publish/DAC/libraries
          mv ./publish/netstandard2.1/DAC.dll ./publish/DAC/DAC.dll
          mv ./libraries/* ./publish/DAC/libraries/

      - name: Git Semantic Version
        id: version
        uses: PaulHatch/semantic-version@v4.0.3
        with:
          major_pattern: "major:"
          minor_pattern: "feat:"
          format: "${major}.${minor}.${patch}"

      - name: Create and push new tag
        run: |
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          draft: false
          prerelease: false

      - name: ZIP File
        run: zip -r Release.zip ./publish/DAC/

      - name: Upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Release.zip
          asset_name: Release.zip
          asset_content_type: application/zip
